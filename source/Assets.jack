/**
 * Variables and assets available globally
 */
class Assets {
	/**
	 * Funtion that draws one of two possible images for the chicken at a given position
	 */
	function void chicken(boolean lr, int xpos, int ypos) {
		var int location;  // 512 * 6 
		let location =  11 + xpos + (512 * ypos); 
		if (lr) {
			do Sprites.chicken1(location);
		} else {
			do Sprites.chicken2(location);
		}
		return;
	}

	/**
	 * Funtion that draws one of two possible images for the enemy at a given position
	 */
	function void enemy(boolean lr, int xpos, int ypos) {
		var int location; // 256*6 
		let location = 11 + xpos + (512 * ypos);
		
		if (lr) {
			do Sprites.enemy1(location);
		} else {
			do Sprites.enemy2(location);
		}
		
		return;
	}

	/**
	 * function that draws a tile to a given position according to its number.
	 */
	function void tiles(int nr, int xpos, int ypos) {
		var int location; // 256*6 
		let location = 11 + xpos + (512 * ypos);
		if (nr = 0) {
			do Tiles.ground1(location);
		}
		if (nr = 1) {
			do Tiles.ground2(location);
		}
		if (nr = 2) {
			do Tiles.ground3(location);
		}
		if (nr = 3) {
			do Tiles.ground3(location);
		}
		if (nr = 4) {
			do Tiles.corner1(location);
		}
		if (nr = 5) {
			do Tiles.t1(location);
		}
		if (nr = 6) {
			do Tiles.wallh(location);
		}
		if (nr = 7) {
			do Tiles.corner2(location);
		}
		if (nr = 8) {
			do Tiles.t4(location);
		}
		if (nr = 9) {
			do Tiles.cross(location);
		}
		if (nr = 11) {
			do Tiles.t2(location);
		}
		if (nr = 12) {
			do Tiles.wallv(location);
		}
		if (nr = 15) {
			do Tiles.cap3(location);
		}
		if (nr = 18) {
			do Tiles.cap2(location);
		}
		if (nr = 19) {
			do Tiles.cap1(location);
		}
		if (nr = 20) {
			do Tiles.corner4(location);
		}
		if (nr = 21) {
			do Tiles.t3(location);
		}
		if (nr = 22) {
			do Tiles.cap4(location);
		}
		if (nr = 23) {
			do Tiles.corner3(location);
		}
		return;
	}

	/**
	 * function that draws a grain to a given position according to its number.
	 */
	function void grain(int nr, int xpos, int ypos) {
		var int location; // 256*6 
		let location = 11 + xpos + (512 * ypos);
		if (nr = 0) {
			do Sprites.grain1(location);
		}
		if (nr = 1) {
			do Sprites.grain2(location);
		}
		if (nr = 2) {
			do Sprites.grain1(location);
		}
		if (nr = 3) {
			do Sprites.grain2(location);
		}
		return;
	}

	/**
	 * function that returns the list of tile numbers
	 */
	function Array tileMap(int level) {
		if (level = 0) {
			return Maps.level1();
		}
		if (level = 1) {
			return Maps.level2();
		}

		return Maps.level3();
	}

	/**
	 * function that returns the list of grain numbers
	 */
	function Array tileGrain(int level) {
		if (level = 0) {
			return Maps.grain1();
		}
		if (level = 1) {
			return Maps.grain2();
		}
		return Maps.grain3();
	}
	
	/**
	 * function that returns the list of enemy-positions for a given level
	 */
	function Array enemyPositions(int level) {
		var Array val;
		if (level = 0) {
			let val = Array.new(4); // level 1
			let val[0] = 5;
			let val[1] = 7;
			let val[2] = 8;
			let val[3] = 6;
		}

		if (level = 1) {
			let val = Array.new(6); // level 2
			let val[0] = 8;
			let val[1] = 1;
			let val[2] = 1;
			let val[3] = 8;
			let val[4] = 7;
			let val[5] = 9;
		}
		//else level = 2
		if (level = 2) {
			let val = Array.new(8); // level 3
			let val[0] = 8;
			let val[1] = 1;
			let val[2] = 4;
			let val[3] = 5;
			let val[4] = 1;
			let val[5] = 10;
			let val[6] = 8;
			let val[7] = 13;
		}
		return val;
	}
	/**
	 * function that returns the count of enemies for a given level
	 */
	function int enemyCount(int level) {
		var int val;
		if (level = 0) {
			let val = 2;
		}
		if (level = 1) {
			let val = 3;
		}
		if (level = 2) {
			let val = 4;
		}
		return val;
		
	}
	
	/**
	 * Constants
	 */
	function int RASTER() {
		return 16;
	} 

	function int MAZEWIDTH() {
		return 10;
	}

	function int MAZEHEIGHT() {
		return 16;
	}

}

